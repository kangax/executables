#!/usr/bin/ruby

require "#{File.expand_path(File.dirname(__FILE__))}/support/helpers"

use_color    = true
project_root = Dir.pwd
project_name = File.basename(project_root)
support_root = "#{File.expand_path(File.dirname(__FILE__))}/support/takeup/#{project_name}"

interpolator = lambda do |*args|
  string = args[0]
  extras = args[1] || {}

  if string
    result = string.dup
    result.gsub!(':project_root', project_root)
    result.gsub!(':project_name', project_name)
    result.gsub!(':support_root', support_root)

    extras.each_pair do |key, value|
      result.gsub!(key, value) if value
    end

    result
  end
end

processes = []

load_config_for File.basename(__FILE__) do |config|
  config[project_name].each do |process|
    pid_file = interpolator.call(process['pid_file'])

    processes << { 'name'     => process['name'],
                   'pid_file' => pid_file,
                   'start'    => interpolator.call(process['start'], ':pid_file' => pid_file),
                   'stop'     => interpolator.call(process['stop'], ':pid_file' => pid_file) }
  end
end

def running?(process)
  File.exist?(process['pid_file'])
end

pid_checker = lambda do
  entries = []

  running = use_color ? "\e[32mon\e[0m" : 'running'
  off = use_color ? "\e[31moff\e[0m" : 'off'

  processes.each do |process|
    if process['pid_file']
      name = process['name'] || File.basename(process['pid_file']).sub('.pid', '')
      status = running?(process) ? running : off
      entries << [name, status]
    end
  end

  entries
end

project_title = use_color ? "\e[32m#{project_name.capitalize}\e[0m" : project_name.capitalize
skipped = use_color ? "\e[31m   - skipped\e[0m" : '   - skipped'

case ARGV[0].to_s.strip
when ''
  puts "\n#{project_title}"

  processes.each do |p|
    if p['name']
      puts "-> Starting #{p['name']}"
    elsif p['start']
      puts "-> Executing #{p['start']}"
    end

    if (p['pid_file'].nil? && p['start']) || (p['pid_file'] && !running?(p))
      system "#{p['start']}"
    elsif p['pid_file'] && running?(p)
      puts skipped
    end
  end

  puts "\n"
when /^(?:done|off|down|stop|enough|quit|not)$/i
  puts "\n#{project_title}"

  processes.reverse.each do |p|
    if p['name']
      puts "-> Stopping #{p['name']}"
    elsif p['stop']
      puts "-> Executing #{p['start']}"
    end

    if (p['pid_file'].nil? && p['stop']) || (p['pid_file'] && running?(p))
      system "#{p['stop']}"
    elsif p['pid_file'] && !running?(p)
      puts skipped
    end
  end

  puts "\n"
when /^(?:status|st)$/i
  entries = pid_checker.call
  width = entries.map(&:first).max.to_s.size + 6

  entries = entries.map do |entry|
    "#{entry.first}".ljust(width) + entry.last
  end

  statuses = entries.empty? ? 'no pids defined' : entries.join("\n  ")
  puts <<-STATUS
  
#{project_title}

  #{statuses}

  STATUS
else
  puts 'Error: command not recognized.'
end